import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@payload-config'

// Helper function to create CORS headers
function createCorsHeaders() {
  const headers = new Headers()
  headers.append('Access-Control-Allow-Origin', '*')
  headers.append('Access-Control-Allow-Methods', 'POST, OPTIONS')
  headers.append('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  return headers
}

export async function POST(req: NextRequest): Promise<NextResponse> {
  try {
    // Initialize Payload
    const payload = await getPayload({
      config,
    })

    // Parse the request body
    const body = await req.json()
    const { name, email, phone, subject, message } = body

    // Validate required fields
    if (!name || !email || !message) {
      const headers = createCorsHeaders()
      return NextResponse.json(
        {
          success: false,
          message: 'Vui lòng cung cấp đầy đủ thông tin: Họ tên, Email và Nội dung',
        },
        {
          status: 400,
          headers,
        }
      )
    }

    // Create a new contact submission
    const submission = await payload.create({
      collection: 'contact-submissions',
      data: {
        name,
        email,
        phone: phone || '',
        subject: subject || 'general',
        message,
        status: 'new',
      },
    })

    // Return success response
    const headers = createCorsHeaders()
    return NextResponse.json(
      {
        success: true,
        message: 'Yêu cầu liên hệ đã được gửi thành công',
        submission: {
          id: submission.id,
          createdAt: submission.createdAt,
        },
      },
      {
        status: 200,
        headers,
      }
    )
  } catch (error) {
    console.error('Error submitting contact form:', error)
    
    const headers = createCorsHeaders()
    return NextResponse.json(
      {
        success: false,
        message: 'Đã xảy ra lỗi khi gửi yêu cầu liên hệ. Vui lòng thử lại sau.',
      },
      {
        status: 500,
        headers,
      }
    )
  }
}

// Handle CORS preflight requests
export function OPTIONS() {
  const headers = createCorsHeaders()
  return new NextResponse(null, {
    status: 204,
    headers,
  })
}
