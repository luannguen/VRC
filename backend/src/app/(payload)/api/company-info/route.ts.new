import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@payload-config'

// Helper function to create CORS headers
function createCorsHeaders() {
  const headers = new Headers()
  headers.append('Access-Control-Allow-Origin', '*')
  headers.append('Access-Control-Allow-Methods', 'GET, OPTIONS')
  headers.append('Access-Control-Allow-Headers', 'Content-Type, Authorization')
  return headers
}

export async function GET(req: NextRequest): Promise<NextResponse> {
  try {
    // Initialize Payload
    const payload = await getPayload({
      config,
    })

    // Fetch company information
    const companyInfo = await payload.findGlobal({
      slug: 'company-info',
      depth: 2, // Populate relations like logo
    })

    // Check if authentication is required
    if (companyInfo?.requireAuth) {
      // Check for Bearer token
      const authHeader = req.headers.get('authorization')
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        // Check for Payload cookie
        const cookies = req.headers.get('cookie')
        const hasPayloadCookie = cookies && cookies.includes('payload-token=')
        
        if (!hasPayloadCookie) {
          const headers = createCorsHeaders()
          return NextResponse.json(
            {
              success: false,
              message: 'Xác thực thất bại. Vui lòng đăng nhập để truy cập thông tin.',
            },
            {
              status: 401,
              headers,
            }
          )
        }
      }
    }

    // Return success response
    const headers = createCorsHeaders()
    return NextResponse.json(companyInfo, {
      status: 200,
      headers,
    })
  } catch (error) {
    console.error('Error fetching company information:', error)
    
    const headers = createCorsHeaders()
    return NextResponse.json(
      {
        success: false,
        message: 'Đã xảy ra lỗi khi lấy thông tin công ty. Vui lòng thử lại sau.',
      },
      {
        status: 500,
        headers,
      }
    )
  }
}

// Handle CORS preflight requests
export function OPTIONS() {
  const headers = createCorsHeaders()
  return new NextResponse(null, {
    status: 204,
    headers,
  })
}
