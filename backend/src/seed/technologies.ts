// filepath: e:\Download\vrc\backend\src\seed\technologies.ts
import { Payload } from 'payload';

// Helper function to get a default media ID for required media fields
async function getDefaultMediaId(payload: Payload): Promise<string | null> {
  try {
    const media = await payload.find({
      collection: 'media',
      limit: 1,
    });
    
    if (media?.docs && media.docs.length > 0 && media.docs[0]?.id) {
      return media.docs[0].id;
    }
    return null;
  } catch (error) {
    console.error('Error fetching default media:', error);
    return null;
  }
}

// Simplified richText structure
const createRichText = (text: string) => {
  return {
    root: {
      type: 'root',
      children: [
        {
          type: 'paragraph',
          version: 1,
          children: [
            {
              type: 'text',
              text: text,
              version: 1,
            },
          ],
        },
      ],
      direction: null,
      format: '',
      indent: 0,
      version: 1,
    }
  };
};

export const seedTechnologies = async (payload: Payload) => {
  console.log('üî¨ Seeding technologies...');

  try {
    // Fetch existing technologies to avoid duplicates
    const existingTechnologies = await payload.find({
      collection: 'technologies',
      limit: 100,
    });

    // If we already have technologies, skip
    if (existingTechnologies.docs.length > 0) {
      console.log(`Found ${existingTechnologies.docs.length} existing technologies, skipping seed.`);
      return;
    }

    // Get default media id for required media fields
    const defaultMediaId = await getDefaultMediaId(payload);
    if (!defaultMediaId) {
      console.error('Failed to get default media ID. Please upload at least one media item first.');
      return;
    }    // Sample technologies based on the frontend data
    const technologies = [
      {
        name: "Inverter DC",
        type: "technology", // Required field
        logo: defaultMediaId, // Required field
        description: createRichText("C√¥ng ngh·ªá bi·∫øn t·∫ßn ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng, ƒëi·ªÅu ch·ªânh c√¥ng su·∫•t linh ho·∫°t theo nhu c·∫ßu."),
        featured: true,
        status: "published",
        order: 1,
      },
      {
        name: "Smart Control System",
        type: "technology", // Required field
        logo: defaultMediaId, // Required field
        description: createRichText("H·ªá th·ªëng ƒëi·ªÅu khi·ªÉn th√¥ng minh, qu·∫£n l√Ω t·ª´ xa qua internet v√† t·ªëi ∆∞u h√≥a v·∫≠n h√†nh."),
        featured: true,
        status: "published",
        order: 2,
      },
      {
        name: "Green Refrigerant",
        type: "technology", // Required field
        logo: defaultMediaId, // Required field
        description: createRichText("M√¥i ch·∫•t l·∫°nh th√¢n thi·ªán v·ªõi m√¥i tr∆∞·ªùng, kh√¥ng l√†m suy gi·∫£m t·∫ßng ozone."),
        featured: true,
        status: "published",
        order: 3,
      },
      // Partners
      {
        name: "Daikin",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("ƒê·ªëi t√°c chi·∫øn l∆∞·ª£c cung c·∫•p thi·∫øt b·ªã ƒëi·ªÅu h√≤a kh√¥ng kh√≠ v√† gi·∫£i ph√°p ƒëi·ªán l·∫°nh ch·∫•t l∆∞·ª£ng cao."),
        website: "https://www.daikin.com",
        featured: true,
        status: "published",
        order: 1,
      },
      {
        name: "Carrier",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("Nh√† cung c·∫•p h√†ng ƒë·∫ßu v·ªÅ c√°c gi·∫£i ph√°p HVAC v√† h·ªá th·ªëng l·∫°nh c√¥ng nghi·ªáp."),
        website: "https://www.carrier.com",
        featured: true,
        status: "published",
        order: 2,
      },      {
        name: "Mitsubishi Electric",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("ƒê·ªëi t√°c cung c·∫•p c√¥ng ngh·ªá ƒëi·ªán l·∫°nh ti√™n ti·∫øn v·ªõi hi·ªáu su·∫•t cao v√† th√¢n thi·ªán m√¥i tr∆∞·ªùng."),
        website: "https://www.mitsubishielectric.com",
        featured: true,
        status: "published",
        order: 3,
      },
      {
        name: "Trane",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("ƒê·ªëi t√°c cung c·∫•p gi·∫£i ph√°p ƒëi·ªÅu h√≤a kh√¥ng kh√≠ v√† l√†m l·∫°nh hi·ªáu qu·∫£ cho c√°c c√¥ng tr√¨nh quy m√¥ l·ªõn."),
        website: "https://www.trane.com",
        featured: true,
        status: "published",
        order: 4,
      },
      {
        name: "LG Electronics",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("ƒê·ªëi t√°c chuy√™n v·ªÅ h·ªá th·ªëng ƒëi·ªÅu h√≤a kh√¥ng kh√≠ th∆∞∆°ng m·∫°i v√† d√¢n d·ª•ng, v·ªõi nhi·ªÅu gi·∫£i ph√°p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng."),
        website: "https://www.lg.com",
        featured: true,
        status: "published",
        order: 5,
      },
      {
        name: "York",
        type: "partner", // Partner type
        logo: defaultMediaId, // Required field
        description: createRichText("ƒê·ªëi t√°c chuy√™n cung c·∫•p c√°c h·ªá th·ªëng ƒëi·ªÅu h√≤a kh√¥ng kh√≠ v√† l√†m l·∫°nh c√¥ng nghi·ªáp hi·ªáu su·∫•t cao."),
        website: "https://www.york.com",
        featured: false,
        status: "published",
        order: 6,
      },
      // Suppliers
      {
        name: "Danfoss",
        type: "supplier", // Supplier type
        logo: defaultMediaId, // Required field
        description: createRichText("Nh√† cung c·∫•p thi·∫øt b·ªã v√† gi·∫£i ph√°p ƒëi·ªÅu khi·ªÉn cho ng√†nh c√¥ng nghi·ªáp ƒëi·ªán l·∫°nh v√† t·ª± ƒë·ªông h√≥a."),
        website: "https://www.danfoss.com",
        featured: true,
        status: "published",
        order: 1,
      },
      {
        name: "Emerson",
        type: "supplier", // Supplier type
        logo: defaultMediaId, // Required field
        description: createRichText("Nh√† cung c·∫•p linh ki·ªán v√† thi·∫øt b·ªã cho h·ªá th·ªëng l·∫°nh th∆∞∆°ng m·∫°i v√† c√¥ng nghi·ªáp."),
        website: "https://www.emerson.com",
        featured: true,
        status: "published",
        order: 2,
      }
    ];

    // Create technologies
    for (const tech of technologies) {
      try {
        const createdTech = await payload.create({
          collection: 'technologies',
          data: tech as any, // Using type assertion as a temporary solution
        });
        console.log(`Created technology: ${createdTech.name}`);
      } catch (error) {
        console.error(`Error creating technology ${tech.name}:`, error);
      }
    }

    console.log(`‚úÖ Successfully seeded technologies`);
  } catch (error) {
    console.error('Error seeding technologies:', error);
  }
};
