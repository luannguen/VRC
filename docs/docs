vrcfrontend là thư mục chứa FE webite vrc
backend là thư mục chưa code xử lý back end và admin sử dụng payload xem thêm về https://payloadcms.com/docs/getting-started/what-is-payload

code API thì xem  https://payloadcms.com/docs/local-api/overview

## Kinh nghiệm tùy chỉnh giao diện admin Payload CMS

### Thêm nút đăng xuất vào menu bên trái
Để thêm nút đăng xuất ở dưới cùng của menu bên trái, sử dụng thuộc tính `afterNavLinks` trong admin components:

```typescript
admin: {
  components: {
    // Thêm nút đăng xuất ở dưới cùng của menu bên trái
    afterNavLinks: ['@/components/Logout'],
  }
}
```

### Khắc phục các lỗi thường gặp

1. **Object literal may only specify known properties**:
   - Vấn đề: Sử dụng tên thuộc tính không đúng với API Payload (ví dụ: `nav` thay vì `Nav`).
   - Giải pháp: Kiểm tra tên thuộc tính chính xác trong tài liệu Payload, phân biệt chữ hoa chữ thường.

2. **Error: ENOENT: no such file or directory**:
   - Vấn đề: Cấu hình tham chiếu đến một tệp không tồn tại.
   - Giải pháp: Kiểm tra đường dẫn, tạo file nếu cần thiết, hoặc xóa tham chiếu từ cấu hình.

3. **Runtime Error (open is not a function)**:
   - Vấn đề: Sử dụng API của Payload không đúng cách (ví dụ: `useModal` hook).
   - Giải pháp: Sử dụng API đúng cách hoặc thay thế bằng giải pháp đơn giản hơn (`window.confirm`).

4. **Mất menu sau khi tùy chỉnh**:
   - Vấn đề: Thay thế hoàn toàn thành phần điều hướng mà không giữ lại các chức năng gốc.
   - Giải pháp: Sử dụng các thuộc tính như `afterNavLinks` thay vì thay thế toàn bộ `Nav`.

### Thực hành tốt nhất

1. **Tùy chỉnh từng thành phần**: Sử dụng các thuộc tính cụ thể như `logout.Button`, `afterNavLinks` thay vì thay thế toàn bộ component.

2. **Cấu trúc component đúng**: Đảm bảo các component có đúng cấu trúc (export default, children props).

3. **Khởi động lại sau khi thay đổi**: Sau khi thay đổi cấu hình, khởi động lại server để importMap được tạo lại.

4. **Kiểm tra kiểu dữ liệu**: Một số thuộc tính yêu cầu mảng (ví dụ: `['@/components/X']`), một số khác chấp nhận chuỗi (ví dụ: `'@/components/Y'`).

5. **Tham khảo tài liệu**: Luôn kiểm tra tài liệu cập nhật tại https://payloadcms.com/docs/admin/components khi gặp vấn đề.

## Cấu hình CORS trong Payload CMS

CORS (Cross-Origin Resource Sharing) là một cơ chế cho phép các tài nguyên web được truy cập từ các domain khác nhau. Việc cấu hình CORS đúng cách là rất quan trọng để tránh lỗi khi frontend gọi API từ backend.

### Cấu hình CORS hiện tại trong dự án

Hiện tại, dự án đang sử dụng cấu hình:

```typescript
cors: [getServerSideURL()].filter(Boolean),
```

Hàm `getServerSideURL()` trả về URL của server (mặc định là `http://localhost:3000` nếu không có biến môi trường `NEXT_PUBLIC_SERVER_URL`).

### Các cách cấu hình CORS trong Payload

1. **Cho phép từ một domain cụ thể**:
   ```typescript
   cors: ['https://example.com'],
   ```

2. **Cho phép từ nhiều domain**:
   ```typescript
   cors: ['https://example.com', 'https://app.example.com'],
   ```

3. **Cho phép từ tất cả các domain (không khuyến khích cho production)**:
   ```typescript
   cors: '*',
   ```

4. **Cấu hình nâng cao với headers tùy chỉnh**:
   ```typescript
   cors: {
     origins: ['https://example.com'],
     headers: ['x-custom-header', 'authorization'],
   },
   ```

### Tránh lỗi CORS phổ biến

1. **Đảm bảo thêm tất cả domain frontend vào danh sách origins**:
   - Development: `http://localhost:[port]`
   - Production: `https://yourdomain.com`

2. **Xử lý credentials**:
   - Nếu sử dụng `credentials: 'include'` trong fetch requests, đảm bảo thiết lập CORS đúng cách

3. **Headers tùy chỉnh**:
   - Nếu sử dụng headers tùy chỉnh trong requests, đảm bảo thêm chúng vào cấu hình CORS

4. **Middleware cho endpoints tùy chỉnh**:
   - Đối với endpoints tùy chỉnh, sử dụng hàm `headersWithCors` của Payload:
   ```typescript
   import { headersWithCors } from 'payload'
   
   return Response.json(
     { message: 'success' },
     {
       headers: headersWithCors({
         headers: new Headers(),
         req,
       })
     },
   )
   ```

### Cấu hình CORS khuyến nghị cho dự án VRC

```typescript
cors: {
  origins: [
    process.env.NEXT_PUBLIC_SERVER_URL || 'http://localhost:3000',  // Backend URL
    process.env.FRONTEND_URL || 'http://localhost:5173',            // Frontend URL (Vite mặc định)
    // Thêm domain production ở đây
  ].filter(Boolean),
  headers: ['authorization', 'content-type', 'x-custom-header'],    // Thêm headers tùy chỉnh nếu cần
},
```

sau khi tạo file, kiểm tra lại xem IDE báo lỗi gì không, nếu có thì sửa lại cho đúng.